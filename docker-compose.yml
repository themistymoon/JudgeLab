version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: judgelab
      POSTGRES_USER: judgelab
      POSTGRES_PASSWORD: judgelab_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U judgelab"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://judgelab:judgelab_dev@postgres:5432/judgelab
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_secret_change_in_production
      - ENVIRONMENT=development
    volumes:
      - ./apps/api:/app
      - judge_artifacts:/app/judge_artifacts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        alembic upgrade head &&
        python -m scripts.seed_data &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://judgelab:judgelab_dev@postgres:5432/judgelab
      - REDIS_URL=redis://redis:6379
      - JUDGE_WORK_DIR=/judge_work
    volumes:
      - ./worker:/app
      - judge_artifacts:/judge_artifacts
      - judge_work:/judge_work
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery worker -A main:app --loglevel=info --concurrency=2

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
      - web

volumes:
  postgres_data:
  redis_data:
  judge_artifacts:
  judge_work: